<?php

/*
 * Auto generated by polyfony-inc/console 
 * on __datetime__
 *
 */

namespace Models;

use Polyfony\Exception as Exception;
use Polyfony\Database as Database;
use Polyfony\Security as Security;
use Polyfony\Locales as Locales;
use Polyfony\Element as Element;
use Polyfony\Config as Config;
use Polyfony\Record as Record;
use Polyfony\Router as Router;
use Polyfony\Cache as Cache;
use Polyfony\Keys as Keys;

class __Table__ extends Record {

	// cache duration for the idAsKey method
	CONST ID_AS_KEY_CACHE_DURATION = 3600*24*30;

	// hard validator
	const VALIDATORS = [
	];

	// cleanup filters
	const FILTERS = [
	];

	 /////////////////////////////////////
	 //  ___ _____ _ _____ ___ ___       
	 // / __|_   _/_\_   _|_ _/ __|      
	 // \__ \ | |/ _ \| |  | | (__       
	 // |___/ |_/_/_\_\_| |___\___| _    
	 //  _ __  ___| |_| |_  ___  __| |___
	 // | '  \/ -_)  _| ' \/ _ \/ _` (_-<
	 // |_|_|_\___|\__|_||_\___/\__,_/__/
                                  

	// return a list with id as a key, mostly usefull for select list
	public static function idAsKey(
		?array $where = [], 
		?bool $allow_cache = false
	) :array {

		// of we have it in the cache
		if(Cache::has('__Table__.idAsKey')) {

			// retrieve from the cache
			$id_as_key = Cache::get('__Table__.idAsKey');

		}
		else {

			$id_as_key = [];

			foreach(
				self::all() 
				as $object
			) {

				$id_as_key[$object->get('id')] = 
					$object->get('id');

			}

			// put it in the cache
			Cache::put(
				'__Table__.idAsKey', 
				$id_as_key, 
				true, 
				self::ID_AS_KEY_CACHE_DURATION
			);

		}

		return $id_as_key;

	}

	// search in all records
	public static function search(
		array $matching=[]
	) :array {

		return self::filter(
			self::_select()
				->select()
				->whereContains($matching)
				->execute()
		);

	}

	// return all records from __Table__ or a subset
	public static function all(
		?array $where = []
	) :array {

		// the base query
		$query = self::_select();

		// if basic where conditions are provided
		if($where) {
			// apply them
			$query->where($where);
		}

		// execute and filter the query
		return self::filter(
			$query->execute()
		);

	}

	// filter the result depending on whatever your want
	public static function filter(
		array $records
	) :array {

		// for each of the record provided
		foreach($records as $id_record => $record) {

			// some right are applied here
			if(false) {
		
				// remove that record
				unset($records[$id_record]); 
		
			}

		}

		// return the list of allowed records
		return $records;

	}

	 /////////////////////////////////////
	 //   ___  ___    _ ___ ___ _____    
	 //  / _ \| _ )_ | | __/ __|_   _|   
	 // | (_) | _ \ || | _| (__  | |     
	 //  \___/|___/\__/|___\___| |_|_    
	 //  _ __  ___| |_| |_  ___  __| |___
	 // | '  \/ -_)  _| ' \/ _ \/ _` (_-<
	 // |_|_|_\___|\__|_||_\___/\__,_/__/
                                  

	// get the url for that object, depending on the user level
	public function getUrl(
		?string $action = 'edit',
		?int $id_level = 1
	) :string {

		return Router::reverse(
			'__table__', 
			[
				'id'		=>$this->get('id'),
				'action'	=>$action 
			]
		);

	}

	public function save() :bool {


		// if(!$this->get('id')) {
		// 	'created_on'	=>time(),
		// 	'created_by'	=>Security::get('id')
		// }

		// $this->set([
		// 	'modification_date'	=>time(),
		// 	'modification_by'	=>Security::get('id')
		// ]);

		// ... code tweaking

		// use the parent saving method
		return parent::save();

	}

}

?>

